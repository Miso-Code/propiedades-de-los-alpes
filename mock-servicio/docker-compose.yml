version: "3"
networks:
  pulsar:
    driver: bridge
  data_collection:
    driver: bridge
  data_control:
    driver: bridge
  properties_and_transactions:
    driver: bridge
  watchdog:
    driver: bridge
  bff:
    driver: bridge
name: propiedades_de_los_alpes
services:
  # Start zookeeper
  zookeeper:
    image: apachepulsar/pulsar:latest
    profiles: ["pulsar"]
    container_name: zookeeper
    restart: on-failure
    networks:
      - pulsar
    volumes:
      - ./data/zookeeper:/pulsar/data/zookeeper
    environment:
      - metadataStoreUrl=zk:zookeeper:2181
    command: >
      bash -c "bin/apply-config-from-env.py conf/zookeeper.conf && \
             bin/generate-zookeeper-config.sh conf/zookeeper.conf && \
             exec bin/pulsar zookeeper"
    healthcheck:
      test: ["CMD", "bin/pulsar-zookeeper-ruok.sh"]
      interval: 10s
      timeout: 5s
      retries: 30

  # Init cluster metadata
  pulsar-init:
    container_name: pulsar-init
    hostname: pulsar-init
    image: apachepulsar/pulsar:latest
    profiles: ["pulsar"]
    networks:
      - pulsar
    command: >
      bin/pulsar initialize-cluster-metadata \
               --cluster cluster-a \
               --zookeeper zookeeper:2181 \
               --configuration-store zookeeper:2181 \
               --web-service-url http://broker:8080 \
               --broker-service-url pulsar://broker:6650
    depends_on:
      zookeeper:
        condition: service_healthy

  # Start bookie
  bookie:
    image: apachepulsar/pulsar:latest
    profiles: ["pulsar"]
    container_name: bookie
    restart: on-failure
    networks:
      - pulsar
    environment:
      - clusterName=cluster-a
      - zkServers=zookeeper:2181
      - metadataServiceUri=metadata-store:zk:zookeeper:2181
    depends_on:
      zookeeper:
        condition: service_healthy
      pulsar-init:
        condition: service_completed_successfully
    # Map the local directory to the container to avoid bookie startup failure due to insufficient container disks.
    volumes:
      - ./data/bookkeeper:/pulsar/data/bookkeeper
    command: bash -c "bin/apply-config-from-env.py conf/bookkeeper.conf
      && exec bin/pulsar bookie"

  # Start broker
  broker:
    image: apachepulsar/pulsar:latest
    profiles: ["pulsar"]
    container_name: broker
    hostname: broker
    restart: on-failure
    networks:
      - pulsar
    environment:
      - metadataStoreUrl=zk:zookeeper:2181
      - zookeeperServers=zookeeper:2181
      - clusterName=cluster-a
      - managedLedgerDefaultEnsembleSize=1
      - managedLedgerDefaultWriteQuorum=1
      - managedLedgerDefaultAckQuorum=1
      - advertisedAddress=broker
      - advertisedListeners=external:pulsar://broker:6650
    depends_on:
      zookeeper:
        condition: service_healthy
      bookie:
        condition: service_started
    ports:
      - "6650:6650"
      - "8080:8080"
    command: bash -c "bin/apply-config-from-env.py conf/broker.conf
      &&  exec bin/pulsar broker"

  # propiedades_de_los_alpes services
  data_collection:
    hostname: data_collection
    build:
      context: .
      dockerfile: data_collection.Dockerfile
    profiles: ["propiedades", "data_collection"]
    networks:
      - pulsar
      - data_collection
      - bff
    depends_on:
      db_data_collection:
        condition: service_healthy
    environment:
      - data_collection_ADDRESS=data_collection
      - PULSAR_SCHEMA=pulsar
      - PULSAR_HOST=broker
      - PULSAR_PORT=6650
      - PULSAR_API_KEY=""
      - DATABASE_URL=postgresql+psycopg2://postgres:postgres@db_data_collection:5432/postgres
      - PYTHONUNBUFFERED=1
    ports:
      - "5000:5000"

  data_control:
    hostname: data_control
    build:
      context: .
      dockerfile: data_control.Dockerfile
    profiles: ["propiedades", "data_control"]
    networks:
      - pulsar
      - data_control
    depends_on:
      db_data_control:
        condition: service_healthy
    environment:
      - PULSAR_SCHEMA=pulsar
      - PULSAR_HOST=broker
      - PULSAR_PORT=6650
      - PULSAR_API_KEY=""
      - DATABASE_URL=postgresql+psycopg2://postgres:postgres@db_data_control:5432/postgres
      - PYTHONUNBUFFERED=1

  properties_and_transactions:
    build:
      context: .
      dockerfile: properties_and_transactions.Dockerfile
    deploy:
      replicas: 4
    profiles: ["propiedades", "properties_and_transactions"]
    networks:
      - pulsar
      - properties_and_transactions
    depends_on:
      db_properties_and_transactions:
        condition: service_healthy
    environment:
      - DATABASE_URL=postgresql+psycopg2://postgres:postgres@db_properties_and_transactions:5432/postgres
      - PULSAR_SCHEMA=pulsar
      - PULSAR_HOST=broker
      - PULSAR_PORT=6650
      - PULSAR_API_KEY=""
      - PYTHONUNBUFFERED=1
#    ports:
#      - "5001:5000" # Commented since we expose the port in the load balancer

  watchdog:
    hostname: watchdog
    build:
      context: .
      dockerfile: watchdog.Dockerfile
    profiles: ["watchdog"]
    networks:
      - pulsar
      - watchdog
    depends_on:
      db_watchdog:
        condition: service_healthy
    environment:
      - PULSAR_SCHEMA=pulsar
      - PULSAR_HOST=broker
      - PULSAR_PORT=6650
      - PULSAR_API_KEY=""
      - DATABASE_URL=postgresql+psycopg2://postgres:postgres@db_watchdog:5432/postgres
      - PYTHONUNBUFFERED=1

  db_data_collection:
    image: postgres:latest
    profiles: ["propiedades", "db"]
    restart: on-failure
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=postgres
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 2s
      timeout: 5s
      retries: 5
    ports:
      - "5433:5432"
    networks:
      - data_collection

  db_data_control:
    image: postgres:latest
    profiles: ["propiedades", "db"]
    restart: on-failure
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=postgres
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 2s
      timeout: 5s
      retries: 5
    ports:
      - "5434:5432"
    networks:
      - data_control

  db_properties_and_transactions:
    image: postgres:latest
    profiles: ["propiedades", "db"]
    restart: on-failure
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=postgres
    healthcheck:
        test: ["CMD-SHELL", "pg_isready -U postgres"]
        interval: 2s
        timeout: 5s
        retries: 5
    ports:
        - "5435:5432"
    networks:
        - properties_and_transactions

  db_watchdog:
    image: postgres:latest
    profiles: [ "db", "watchdog"]
    restart: on-failure
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=postgres
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 2s
      timeout: 5s
      retries: 5
    ports:
      - "5436:5432"
    networks:
      - watchdog

  # Watcher to listen for Integration events, This is only for debugging purposes
  watcher:
    hostname: watcher
    build:
      context: .
      dockerfile: watcher.Dockerfile
    deploy:
      replicas: 4
    profiles: ["watcher"]
    networks:
      - pulsar
    environment:
      - PULSAR_SCHEMA=pulsar
      - PULSAR_HOST=broker
      - PULSAR_PORT=6650
      - PULSAR_API_KEY=""
      - PYTHONUNBUFFERED=1

    # Load balancer
    # TODO: Flask uses redirects on non trailing slashes, so we need to add a trailing slash to the URL
    # In the meantime you can call the url with the trailing slash explicitly
  load_balancer:
    build:
        context: .
        dockerfile: load_balancer.Dockerfile
    restart: on-failure
    profiles: ["propiedades", "properties_and_transactions"]
    networks:
      - properties_and_transactions
    ports:
      - "5001:80"
    depends_on:
      - properties_and_transactions

#  bff_ws:
#    build:
#      context: .
#      dockerfile: bff_ws.Dockerfile
#    restart: on-failure
#    # profiles: ["bff"]
#    networks:
#      - bff
#      - pulsar
#    ports:
#      - "8000:8000"
#    depends_on:
#      - data_collection
#    environment:
#      - DATA_INGESTION_URL=http://data_collection:5000
#      - PYTHONUNBUFFERED=1

  bff_gql:
    build:
      context: .
      dockerfile: bff_gql.Dockerfile
    restart: on-failure
    profiles: ["bff"]
    networks:
      - bff
      - pulsar
    ports:
      - "8001:8000"
    depends_on:
      - data_collection
    environment:
      - DATA_COLLECTION_PATH=http://data_collection:5000
      - DATA_CONTROL_PATH=http://data_control:5000
      - PROPERTY_AND_TRANSACTIONS_PATH=http://properties_and_transactions:5000
      - PULSAR_SCHEMA=pulsar
      - PULSAR_HOST=broker
      - PULSAR_PORT=6650
      - PULSAR_API_KEY=""
      - PYTHONUNBUFFERED=1